#! /bin/bash

clear
echo "===== NODEJS-EXPRESS ENVIRONMENT INITAILIZE SCRIPT ====="
# Local GIT repository
echo ""
echo ">> Initialize local Git repository..."
read -p "Repository name: " repoName
read -p "Branch name (main, master or anything): " branchName

mkdir $repoName
cd $repoName
echo "# "$repoName >> README.md
echo "# "$repoName" LICENSE" >> LICENSE.md
touch .gitignore
cat > .gitignore << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of "npm pack"
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Uploads directories
.public/uploads/

EOF

# Prettier
echo ""
read -p "Use prettier? (y/n): " usePrettier
if [ $usePrettier = "y" ] ; then
	touch .prettierrc .prettierignore

	cat > .prettierrc << EOF
{
	"trailingComma": "es5",
	"semi": false,
	"singleQuote": true,
	"arrowParens": "avoid",
	"tabWidth": 4,
	"printWidth": 90
}
EOF

	cat > .prettierignore << EOF
**/.git
**/.svn
**/.hg
**/node_modules
EOF
fi

echo ""
echo ">> Generating NodeJS environment..."

# Create directories and files structure
touch app.js
	cat > app.js << EOF
// Initialize
require('dotenv').config()
const path = require('path')
const morgan = require('morgan')

const express = require('express')
// End Initialize


// App config
app.set('views', 'views')

app.use(express.urlencoded({ extended: true }))
app.use(express.json())

app.use(express.static(path.join(__dirname, 'public')))

// End App config


// Middlewares
app.use(morgan('dev'))
// End Middlewares



// Access-Control
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Credentials', true)
    res.header('Access-Control-Allow-Origin', '*')
    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, PATCH, DELETE')
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization')

    next()
})

// Response local variables
app.use((req, res, next) => {
	// Response local variable list

	// End Response local variable list

	next()
})
// End Response local variables


// Routes
// End Routes


// Connect database and running the server
// End Connect database and running the server


EOF

touch .env

mkdir models views controllers routes apis auths middlewares utils config public
mkdir public/images public/css public/js public/uploads routes/api

cd config
touch database.js server.js
cd ..

cd public/css
touch main.css container.css nav.css form.css text.css colors.css decore.css
cd ../..

# Install NodeJS packages
echo ""
echo ">> Installing node packages..."
echo "Installing dotenv bcryptjs @types/node randomstring nodemon morgan"
npm i --save dotenv bcryptjs @types/node randomstring
npm i --save-dev nodemon morgan
echo ""
echo "Main stack"
echo "1. express mongoose"
echo "2. express mysql2"
read -p "Select stack: " mainStackId

# Session
echo ""
read -p "Use session? (y/n): " useSession

# Express
echo "Installing express"
npm i --save express

# Mongoose or MySQl2
if [ $mainStackId = "1" ] ; then
	cat > .env << EOF
MONGODB_URI = 'mongodb://127.0.0.1:27017/$repoName'

EOF
	
	echo "Installing mongoose"
	npm i --save mongoose
	sed -i "/\/\/ End Initialize/i \
const mongoose = require('mongoose')\n\
	" app.js
	
	if [ $useSession = "y" ] ; then
		echo "Installing express-session connect-mongodb-session"
		npm i --save express-session connect-mongodb-session
		sed -i "/\/\/ End Initialize/i \
const session = require('express-session')\n\
const MongoDBStore = require('connect-mongodb-session')(session)\n\n\
const store = new MongoDBStore({\n\
	uri: process.env.MONGODB_URI,\n\
	collection: 'sessions'\n\
})\n\
store.on('error', error => {\n\
	console.log(error)\n\
	process.exit(1)\n\
})\n\
	" app.js
	
		sed -i "/\/\/ Middlewares/a \
app.use(session({\n\
	secret: 'secret key',\n\
	cookie: {\n\
		maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n\
	},\n\
	store: store,\n\
	resave: true,\n\
	saveUninitialized: true\n\
}))\n\
		" app.js
	fi
	
	sed -i "/\/\/ Connect database and running the server/a \
const serverPort = process.env.PORT || 3000\n\
mongoose\n\
	.connect(process.env.MONGODB_URI)\n\
    .then(result => {\n\
		console.log('MongoDB database connected.')\n\n\
		app.listen(serverPort, result => {\n\
			console.log(\`Listening on port \${serverPort}...\`)\n\
		})\n\
    })\n\
    .catch(err => {\n\
		console.log('Error occurred while starting the server\!\!\!')\n\
		process.exit(3)\n\
    })\n\
		" app.js
elif [ $mainStackId = "2" ] ; then
	cat > .env << EOF
MYSQL_HOST = '127.0.0.1'
MYSQL_DATABASE = '$repoName'
MYSQL_USER = 'root'
MYSQL_PASSWORD = ''

EOF
	echo "Installing mysql2"
	npm i --save mysql2
	
	cat > config/database.js << EOF
const mysql = require('mysql2')
exports.connectionPool = mysql.createPool({
	host: process.env.MYSQL_HOST,
	database: process.env.MYSQL_DATABASE,
	user: process.env.MYSQL_USER,
	password: process.env.MYSQL_PASSWORD,
}).promise()
EOF
	
	if [ $useSession = "y" ] ; then
		echo "Installing express-session"
		npm i --save express-session
		sed -i "/\/\/ End Initialize/i \
const session = require('express-session')\n\
	" app.js
	
	sed -i "/\/\/ Middlewares/a \
app.use(session({\n\
  	secret: 'secret key',\n\
	cookie: {\n\
		maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n\
	},\n\
	resave: true,\n\
	saveUninitialized: true\n\
}))\n\
		" app.js	
	
		sed -i "/\/\/ Connect database and running the server/a \
const serverPort = process.env.PORT || 3000\n\
app.listen(serverPort, result => {\n\
  console.log(\`Listening on port \${serverPort}...\`)\n\
})\n\
		" app.js
	fi
fi

# Flash message
if [ $useSession = "y" ] ; then
	echo ""
	read -p "Use Connect Flash? (y/n): " useConnectFlash
	if [ $useConnectFlash = "y" ] ; then
		echo "Installing connect-flash"
		npm i --save connect-flash
		sed -i "/\/\/ End Initialize/i \
const flash = require('connect-flash')\n\
		" app.js

		sed -i "/\/\/ End Middlewares/i \
app.use(flash())\n\
		" app.js

		cat > public/css/connect-flash.css << EOF
.flash__container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: fit-content;
    padding: 0.5em;
}
.flash__container.success {
    color: white;
    background-color: var(--background-success);
}
.flash__container.warning {
    color: black;
    background-color: var(--background-warning);
}
.flash__container.error {
    color: white;
    background-color: var(--background-error);
}
.flash__container .message {
    margin: 0;
    font-size: 12px;
    font-style: italic;
}
EOF

	fi
fi

# Multer and Sharp-Multer
echo ""
read -p "Use Multer and Sharp-Multer? (y/n): " useMulter
if [ $useMulter ] ; then
	echo "Installing multer sharp-multer"
	npm i --save multer sharp-multer

	mkdir public/uploads/files
	mkdir public/uploads/images
	touch public/uploads/files/.gitkeep
	touch public/uploads/images/.gitkeep

	cat > middlewares/fileUploader.js << EOF
const path = require('path')

const multer = require('multer')

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        // Rename original file
        // file.originalname = file.fieldname + path.extname(file.originalname)

        // Filtering path to save
        if (file.fieldname === 'file' || file.fieldname === 'files') {
            cb(null, 'public/uploads/files')
        } else {
            cb(null, 'public/uploads')
        }
    },
    filename: (req, file, cb) => {
        cb(null, `file-${Date.now()}${path.extname(file.originalname)}`)
    },
})

module.exports = multer({
    storage: storage,
    fileSize: 25 * 1024 * 1024,
})
EOF

	cat > middlewares/imageUploader.js << EOF
const path = require('path')

const multer = require('multer')
const sharpMulter = require('sharp-multer')

const storage = sharpMulter({
    destination: (req, file, cb) => {
        // Rename original file
        // file.originalname = file.fieldname + path.extname(file.originalname)

        // Filtering path to save
        if (file.fieldname === 'image' || file.fieldname === 'images') {
            cb(null, 'public/uploads/images')
        } else {
            cb(null, 'public/uploads')
        }
    },
    imageOptions: {
        useTimestamp: true,
        fileFormat: 'jpg',
        quality: 90,
        resize: {
            width: 1000,
            height: 1000,
            resizeMode: 'cover',
        },
    },
})

module.exports = multer({
    storage: storage,
    fileSize: 5 * 1024 * 1024,
})
EOF

fi

# place app at last of init phase
sed -i "/\/\/ End Initialize/i \
const app = express()\n\
	" app.js

# EJS
echo ""
read -p "Use EJS view engine? (y/n): " useEJS
if [ $useEJS = "y" ] ; then
	echo "Installing ejs"
	npm i --save ejs

	sed -i "/app.set('views', 'views')/a \
app.set('view engine', 'ejs')\
	" app.js

	sed -i "/\/\/ Response local variable list/a \
	res.locals.pageTitle = '$repoName'\
	" app.js

	mkdir views/partials
	cd views/partials
	touch head.ejs joint.ejs footer.ejs nav.ejs

	cat > head.ejs << EOF
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<!-- Bootstrap 5.2 -->
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

		<!-- Sweetalert2 -->
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

		<!-- Internal CSS -->
		<link rel="stylesheet" href="css/main.css">
		<link rel="stylesheet" href="css/container.css">
		<link rel="stylesheet" href="css/nav.css">
		<link rel="stylesheet" href="css/form.css">
		<link rel="stylesheet" href="css/decore.css">
		<link rel="stylesheet" href="css/colors.css">
		<link rel="stylesheet" href="css/text.css">
		
		<title><%= pageTitle %></title>
EOF
	cat > joint.ejs << EOF
		
	</head>
	<body>
EOF

	cat > footer.ejs << EOF
		
		<footer>
			<!-- Footer content -->

		</footer>

		<!-- Bootstrap 5.2 -->
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
  	</body>
</html>
EOF

# Connect-Flash EJS
	if [ $useConnectFlash = "y" ] ; then
		cat > connect-flash-swal.ejs << EOF
<!-- Passing to SweetAlert2 -->
<% if (flashSwal[0]) { %>
<input type="hidden" name="swalType" id="swalType" value="<%= flashSwal[0].type %>">
<input type="hidden" name="swalTitle" id="swalTitle" value="<%= flashSwal[0].title %>">
<input type="hidden" name="swalMessage" id="swalMessage" value="<%= flashSwal[0].message %>">
<input type="hidden" name="swalDetails" id="swalDetails" value="<%= flashSwal[0].details %>">
<input type="hidden" name="swalFooter" id="swalFooter" value="<%= flashSwal[0].footer %>">	
<% } %>
EOF
	fi

	cd ../

	cat > index.ejs << EOF
<%- include('./partials/head.ejs') %>
<!-- Extra head contents (eg. meta, link, style, or script) -->

<%- include('./partials/joint.ejs') %>
<!-- Body contents -->
		<header>
			<!-- Header content -->

		</header>

		<main>
			<!-- Main content -->

		</main>

<%- include('./partials/footer.ejs') %>
EOF

	if [ $useConnectFlash = "y" ] ; then
		sed -i "/<\/header>/a \
<%- include('./partials/connect-flash-swal.ejs') %>\n\
		" index.ejs
	fi

	cd ../

	if [ $useConnectFlash = "y" ] ; then
		sed -i "/\/\/ End Response local variable list/i \
	res.locals.flashSwal = req.flash('flashSwal')\n\
		" app.js

		sed -i "/<\!-- Internal CSS -->/a \
		<link rel=\"stylesheet\" href=\"css/connect-flash.css\">
		" views/partials/head.ejs

		cat > public/js/swals.js << EOF
function flashSwal() {
    try {
        const swalType = document.querySelector('input#swalType').value
        const swalTitle = document.querySelector('input#swalTitle').value
        const swalMessage = document.querySelector('input#swalMessage').value
        const swalDetails = document.querySelector('input#swalDetails').value
        const swalFooter = document.querySelector('input#swalFooter').value
        swal.fire({
            icon: swalType,
            title: swalTitle,
            html: swalDetails ? swalMessage + '<hr/><i>' + swalDetails + '</i>' : swalMessage,
            footer: swalFooter,
            timer: 30000,
            timerProgressBar: true,
        })
    } catch (error) {
        // pass
    }
}
EOF

		sed -i "/<\/head>/i \
		<script src=\"/js/swals.js\"></script>\n\
		" views/partials/joint.ejs

		sed -i "s/<body>/<body onload=\"flashSwal()\">/g" views/partials/joint.ejs
	fi
	
	cat >> .prettierignore << EOF

# EJS files
*.ejs

EOF

fi

# Welcome Homepage
echo ""
read -p "Create welcome homepage? (y/n): " createHomepage
if [ $createHomepage = "y" ] ; then

	# CSS
	cat > public/css/main.css << EOF
@import url('https://fonts.googleapis.com/css2?family=Sofia+Sans&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Sofia Sans', sans-serif;
}

a,
a:link {
    text-decoration: none;
}

.welcome-box {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin: 25vh auto;
    padding: 3em;
    border: 2px #333 solid;
    border-radius: 7px;
}

EOF

	# EJS
	if [ $useEJS = "y" ] ; then
		cat > controllers/homeController.js << EOF
exports.getHome = (req, res) => {
    res.render('index', {
        pageTitle: '$repoName - Home',
    })
}

exports.getHomeSwal = (req, res) => {
	req.flash('flashSwal', {
            type: 'success',
            title: 'Setup Completed',
            message: 'Connect-Flash-Swal ready',
            details: 'Connect-Flash and SweetAlert2 setup successful.',
            footer: '',
        })
		res.redirect('/')
}
EOF
		sed -i "/<main>/a \
			<div class=\"container\">\n\
				<div class=\"welcome-box\">\n\
					<h1><b>WELCOME HOMEPAGE</b></h1>\n\
					<h3><b>Environment initialization successful.</b></h3>\n\
					<h5>You are ready to roll</h5>\n\n\
					<hr>\n\
					<p><a href=\"/flashswal\"><button class=\"btn btn-primary\">Test FlashSwal</button></a></p>\n\
					<hr>\n\
					<p>\n\
						<i><small>Generated by: feinz (<a href=mailto:feineirz@live.com>feineirz@live.com</a>)</small></i>\n\
					</p>\n\
				</div>\n\
			</div>\n\
		" views/index.ejs
	else
		cat > controllers/homeController.js << EOF
exports.getHome = (req, res) => {
	const html = '''
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<!-- For Bootstrap -->
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

		<link rel="stylesheet" href="css/main.css">
		
		<title>$repoName - Home</title>	
	</head>
	<body>
		<header></header>

		<main>
			<div class="container">
				<div class="welcome-box">
					<h1><b>WELCOME HOMEPAGE</b></h1>
					<h3><b>Environment initialization successful.</b></h3>
					<h5>You are ready to roll</h5>
					<p>
						<!-- prettier-ignore -->
						<i><small>Generated by: feinz (<a href="mailto:feineirz@live.com">feineirz@live.com</a>)</small></i>
					</p>
				</div>
			</div>
		</main>	

		<footer></footer>

		<!-- For Bootstrap -->
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

  	</body>
</html>
'''
    res.send(html)
}
EOF
	fi
	
	cat > routes/homeRoutes.js << EOF
const routes = require('express').Router()
const homeController = require('../controllers/homeController')

routes.get('/', homeController.getHome)
routes.get('/flashswal', homeController.getHomeSwal)

module.exports = routes
EOF
	sed -i "/\/\/ Routes/a \
const homeRoutes = require('./routes/homeRoutes')\n\n\
app.use(homeRoutes)\n\
	" app.js

fi

# npm init
echo ""
echo ">> Initialize application..."

npm init

sed -i '/"scripts": {/a \
	"dev": "nodemon app.js",\
	"start": "node app.js",
	' package.json

git init
git add *
git add .gitignore .prettierrc .prettierignore
git commit -m "first initialize commit"
git branch -M $branchName

echo ""
read -p "Use github repository? (y/n): " useGithub
if [ $useGithub = "y" ] ; then
	echo ""
	read -p "Github username: " ghUsername
	read -p "Using HTTPS or SSH? (https/ssh)" ghMethod
	if [ $ghMethod == "https" ] ; then
		git remote add origin https://github.com/$ghUsername/$repoName.git
		git push -u origin $branchName
		git config --global credential.helper store
	elif [ $ghMethod == "ssh" ] ; then
		git remote add origin git@github.com:$ghUsername/$repoName.git
		git remote set-url origin git@github.com:$ghUsername/$repoName.git
		git push -u origin $branchName
	else
		echo "Invalid parameter"
	fi
fi

echo ""
echo "Environment initialization successful."
echo ""
echo "========================================================"



