#! /bin/bash

clear
echo "===== NODEJS INITAILIZE SCRIPT ====="
# Local GIT repository
echo ""
echo ">> Initailize local Git repository..."
read -p "Repository name: " repoName
read -p "Branch name (main, master or anything): " branchName

mkdir $repoName
cd $repoName
echo "# "$repoName >> README.md
echo "# "$repoName" LICENSE" >> LICENSE.md
touch .gitignore
cat > .gitignore << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of "npm pack"
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Uploads directories
.uploads/

EOF

# Prettier
echo ""
read -p "Use prettier? (y/n): " usePrettier
if [ $usePrettier = "y" ] ; then
	touch .prettierrc .prettierignore

	cat > .prettierrc << EOF
{
	"trailingComma": "es5",
	"semi": false,
	"singleQuote": true,
	"arrowParens": "avoid",
	"tabWidth": 4,
	"printWidth": 90
}
EOF
fi

echo ""
echo ">> Generating NodeJS environment..."

# Create directories and files structure
touch app.js
	cat > app.js << EOF
// Initialize
require('dotenv').config()
const path = require('path')
const morgan = require('morgan')

const express = require('express')
// End Initialize


// App config
app.set('views', 'views')

app.use(express.urlencoded({ extended: true }))
app.use(express.json())

app.use(express.static(path.join(__dirname, 'public')))

// End App config


// Middlewares
app.use(morgan('dev'))
// End Middlewares



// Access-Control
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Credentials', true)
    res.header('Access-Control-Allow-Origin', '*')
    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, PATCH, DELETE')
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization')

    next()
})

// Response local variables
// End Response local variables


// Routes
// End Routes


// Connect database and running the server
// End Connect database and running the server


EOF

touch .env

mkdir models views controllers routes apis auths middlewares utils config public
mkdir public/images public/css public/js public/uploads routes/api

cd config
touch database.js server.js
cd ..

cd public/css
touch main.css container.css nav.css form.css text.css colors.css decore.css
cd ../..

# Install NodeJS packages
echo ""
echo ">> Installing node packages..."
echo "Installing dotenv bcryptjs @types/node randomstring nodemon morgan"
npm i --save dotenv bcryptjs @types/node randomstring
npm i --save-dev nodemon morgan
echo ""
echo "Main stack"
echo "1. express mongoose"
echo "2. express mysql2"
read -p "Select stack: " mainStackId

# Session
echo ""
read -p "Use session? (y/n): " useSession

# Express
echo "Installing express"
npm i --save express

# Mongoose or MySQl2
if [ $mainStackId = "1" ] ; then
	cat > .env << EOF
MONGODB_URI = 'mongodb://127.0.0.1:27017/$repoName'

EOF
	
	echo "Installing mongoose"
	npm i --save mongoose
	sed -i "/\/\/ End Initialize/i \
const mongoose = require('mongoose')\n\
	" app.js
	
	if [ $useSession = "y" ] ; then
		echo "Installing express-session connect-mongodb-session"
		npm i --save express-session connect-mongodb-session
		sed -i "/\/\/ End Initialize/i \
const session = require('express-session')\n\
const MongoDBStore = require('connect-mongodb-session')(session)\n\n\
const store = new MongoDBStore({\n\
  uri: process.env.MONGODB_URI,\n\
  collection: 'sessions'\n\
})\n\
store.on('error', error => {\n\
  console.log(error)\n\
  process.exit(1)\n\
})\n\
	" app.js
	
		sed -i "/\/\/ Middlewares/a \
app.use(session({\n\
  secret: 'secret key',\n\
  cookie: {\n\
		maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n\
  },\n\
  store: store,\n\
  resave: true,\n\
  saveUninitialized: true\n\
}))\n\
		" app.js
		
# Flash message
		echo ""
		read -p "Use Connect Flash? (y/n): " useFlashMessage
		if [ $useFlashMessage = "y" ] ; then
			echo "Installing connect-flash"
			npm i --save connect-flash
			sed -i "/\/\/ End Initialize/i \
const flash = require('connect-flash')\n\
			" app.js
	
			sed -i "/\/\/ End Middlewares/i \
app.use(flash())\n\
			" app.js			
		fi
	fi
	
	sed -i "/\/\/ Connect database and running the server/a \
const serverPort = process.env.PORT || 3000\n\
mongoose\n\
	.connect(process.env.MONGODB_URI)\n\
    .then(result => {\n\
      console.log('MongoDB database connected.')\n\n\
      app.listen(serverPort, result => {\n\
          console.log(\`Listening on port \${serverPort}...\`)\n\
      })\n\
    })\n\
    .catch(err => {\n\
      console.log('Error occurred while starting the server\!\!\!')\n\
      process.exit(3)\n\
    })\n\
		" app.js
elif [ $mainStackId = "2" ] ; then
	cat > .env << EOF
MYSQL_HOST = '127.0.0.1'
MYSQL_DATABASE = '$repoName'
MYSQL_USER = 'root'
MYSQL_PASSWORD = ''

EOF
	echo "Installing mysql2"
	npm i --save mysql2
	
	cat > config/database.js << EOF
const mysql = require('mysql2')
exports.connectionPool = mysql.createPool({
	host: process.env.MYSQL_HOST,
	database: process.env.MYSQL_DATABASE,
	user: process.env.MYSQL_USER,
	password: process.env.MYSQL_PASSWORD,
}).promise()
EOF
	
	if [ $useSession ] ; then
		echo "Installing express-session"
		npm i --save express-session
		sed -i "/\/\/ End Initialize/i \
const session = require('express-session')\n\
	" app.js
	
	sed -i "/\/\/ Middlewares/a \
app.use(session({\n\
  secret: 'secret key',\n\
  cookie: {\n\
	maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n\
  },\n\
  resave: true,\n\
  saveUninitialized: true\n\
}))\n\
		" app.js	
	
		sed -i "/\/\/ Connect database and running the server/a \
const serverPort = process.env.PORT || 3000\n\
app.listen(serverPort, result => {\n\
  console.log(\`Listening on port \${serverPort}...\`)\n\
})\n\
		" app.js
	fi
fi



sed -i "/\/\/ End Initialize/i \
const app = express()\n
	" app.js

# EJS
echo ""
read -p "Use EJS view engine? (y/n): " useEJS
if [ $useEJS = "y" ] ; then
	echo "Installing ejs"
	sed -i "/app.set('views', 'views')/a \
app.set('view engine', 'ejs')\
	" app.js
	sed -i "/\/\/ Response local variables/a \
app.use((req, res, next) => {\n\
	res.locals.pageTitle = '$repoName'\n\n\
	next()\n\
})\n\
	" app.js
	
	npm i --save ejs
	mkdir views/partials
	cd views/partials
	touch header.ejs joint.ejs footer.ejs nav.ejs
	cat > header.ejs << EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
     <link rel="stylesheet" href="css/main.css">
    
    <title><%= pageTitle %></title>
EOF
	cat > joint.ejs << EOF
	
  </head>
  <body>
EOF
	cat > footer.ejs << EOF
	
  </body>
</html>
EOF
	cd ../
	touch index.ejs
	cat > index.ejs << EOF
<%- include('./partials/header.ejs') %>
<!-- Extra header contents -->

<%- include('./partials/joint.ejs') %>
<!-- Body contents -->

<%- include('./partials/footer.ejs') %>
EOF
	cd ../
	
	cat > .prettierignore << EOF
# EJS Partials
views/partials/*.ejs

EOF

fi

# Welcome Home Page
echo ""
read -p "Create welcome homepage? (y/n): " createHomepage
if [ $createHomepage = "y" ] ; then

	# CSS
	cat > public/css/main.css << EOF
@import url('https://fonts.googleapis.com/css2?family=Sofia+Sans&display=swap');

body {
	font-family: 'Sofia Sans', sans-serif;
}
EOF


	# EJS
	if [ $useEJS = "y" ] ; then
		cat > controllers/homeController.js << EOF
exports.getHome = (req, res) => {
    res.render('index', {
        pageTitle: '$repoName - Home',
    })
}
EOF
		sed -i "/<!-- Body contents -->/a \
	<h1>WELCOME HOME PAGE<\/h1>\n\
	<p>Environment initialization successful.<\/p>\n\
		" views/index.ejs
	else
		cat > controllers/homeController.js << EOF
exports.getHome = (req, res) => {
    res.send('<h1>WELCOME HOME PAGE</h1><br/><p>Environment initialization successful.</p><br/>')
}
EOF
	fi
	
	cat > routes/homeRoutes.js << EOF
const routes = require('express').Router()
const homeController = require('../controllers/homeController')

routes.get('/', homeController.getHome)

module.exports = routes
EOF
	sed -i "/\/\/ Routes/a \
const homeRoutes = require('./routes/homeRoutes')\n\n\
app.use(homeRoutes)\n\
	" app.js

fi

# npm init
echo ""
echo ">> Initialize application..."
npm init

sed -i '/"scripts": {/a \
	"dev": "nodemon app.js",\n\
	"start": "node app.js",\n\
	' package.json

echo ""
echo "Environment initialization successful."



