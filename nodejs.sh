#! /bin/bash

clear
echo "===== NODEJS INITAILIZE SCRIPT ====="
echo ""
echo ">> Initailize local Git repository..."
read -p "Repository name: " repoName
read -p "Branch name (main / master or anything): " branchName

mkdir $repoName
cd $repoName
echo "# "$repoName >> README.md
echo "# "$repoName" LICENSE" >> LICENSE.md
touch .gitignore
cat > .gitignore << EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of "npm pack"
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Uploads directories
.uploads/

EOF
echo ""
read -p "Use prettier? (y/n): " usePrettier
if [ $usePrettier = "y" ] ; then
	touch .prettierrc .prettierignore

	cat > .prettierrc << EOF
{
	"trailingComma": "es5",
	"semi": false,
	"singleQuote": true,
	"arrowParens": "avoid",
	"tabWidth": 2,
	"printWidth": 90
}
EOF
fi

echo ""
echo ">> Generating NodeJS environment..."

touch app.js
	cat > app.js << EOF
// Initialize
const path = require('path')
// End Initialize


// App config
app.set('views', 'views')

app.use(express.urlencoded({ extended: true }))
app.use(express.json())

app.use(express.static(path.join(__dirname, 'public')))
// End App config


// Middlewares
// End Middlewares


// Response local variables
// End Response local variables


// Routes
// End Routes


// Connect database and running the server
// End Connect database and running the server


EOF

touch .env

mkdir models views controllers routes auths middlewares utils config public
mkdir public/images public/css public/js public/uploads

cd config
touch database.js server.js
cd ..

cd public/css
touch main.css container.css nav.css form.css text.css colors.css decore.css
cd ../..

echo ""
echo ">> Installing node packages..."
echo "Installing dotenv bcryptjs @types/node randomstring nodemon morgan"
npm i --save dotenv bcryptjs @types/node randomstring
npm i --save-dev nodemon morgan
echo ""
echo "Main stack"
echo "1. express mongoose"
echo "2. express mysql2"
read -p "Select stack: " stackId

if [ $stackId = "1" ] ; then
	echo "Installing express mongoose"
	npm i --save express mongoose
	sed -i "/\/\/ End Initialize/i \
const express = require('express')\n\
const mongoose = require('mongoose')\n\n\
const app = express()\n
	" app.js
elif [ $stackId = "2" ] ; then
	echo "Installing express mysql2"
	npm i --save express mysql2
	sed -i "/\/\/ End Initialize/i \
const express = require('express')\n\
const mysql = require('mysql2')\n\n\
const app = express()\n
	" app.js
fi

read -p "Use EJS view engine? (y/n): " useEJS
if [ $useEJS = "y" ] ; then
	echo "Installing ejs"
	sed -i "/app.set('views', 'views')/a \
app.set('view engine', 'ejs')\n
	" app.js
	
	npm i --save ejs
	mkdir views/partials
	cd views/partials
	touch header.ejs joint.ejs footer.ejs nav.ejs
	cd ../
	touch index.ejs
	cd ../
fi


